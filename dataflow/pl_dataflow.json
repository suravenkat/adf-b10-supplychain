{
	"name": "pl_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_Dataflow",
						"type": "DatasetReference"
					},
					"name": "source1Table1",
					"description": "source1Table1"
				},
				{
					"dataset": {
						"referenceName": "ds_Source_Dataflow_tbl2",
						"type": "DatasetReference"
					},
					"name": "source1Table2",
					"description": "source1Table2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_target_dataflow",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          dep as string,",
				"          salary as decimal(10,2),",
				"          last_updated as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1Table1",
				"source(output(",
				"          id as integer,",
				"          location as string,",
				"          mobilenum as string,",
				"          address as string,",
				"          last_updated as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1Table2",
				"source1Table1, source1Table2 join(source1Table1@id == source1Table2@id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 filter(equals(dep, 'IT')) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['jointable'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          employee_id = source1Table1@id,",
				"          employee_name = name,",
				"          dep,",
				"          salary,",
				"          address,",
				"          last_updated = source1Table2@last_updated",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}